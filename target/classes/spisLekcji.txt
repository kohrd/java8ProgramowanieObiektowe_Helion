01-01 historia javy
01-02 konfiguracja srodowiska, intelij, jdk w windows
01-03 code-reformat code
01-04 komentarze wilelonijkowe, komnetarze dokumentacyjne
02-01 boolean, byte, short,
02-02 zmiennoprzecinkowe double float
02-03 ciągiu znaków string char. prymitywy nie mają raczej metod tak jak obiekty
02-04 operacje arytmrtyczne dodawnie, mnożenie, dzielenie modulo inkrementacja, przesunięcie bitowe
02-05 inne zapisy liczb (szesnastkowo)
02-06 duże liczby i operacje finansowe, BigDecimal, BigInteger
03-01 stałe zmienne zmienne final
03-02 zmienne stałe globalne static
03-03 nazewnictwo, pole statyczne i pole klasy
03-04 rzutowanie cast
03-05 program expres do kamy skaner wyjątek
04-01 instrukcje sterujące if else
04-02 operatory logiczne // podwojny && sprawdza najpierw prawą część i jesli jest tru to lewą pojedyńczy zawsze sprawdza obie co może byc problemem jak np przyrównujemy do 0
      equals ingnoreCase
04-03 switch  case łączony, switch do stringow
05_01 tablice
05_02 tablice wielowymiarowe
06_01 petla for
06_02 for each sortowanie bąbelkowe
06-03 while i  do while
06-04 break i continue, przerywanie petli zewnętrznej w petlach zagniżdzonych
06-05 program express do kawy case switch
07-01 obiektowosc teoria
07-02 podstawy obiektowosci (w sumie teoria)
08-01 metody przeciążanie zwracanie za pomocą samego return  SOUTV
08-02 pola klasy, pola statyczne dostępne poza obiektami
08-03 widocznośc zmiennych czy w metpodach czy w pętlach
08-04 program expers do kawy - refaktoring i przerobienie na oop  // TEGO NIE ROBIŁEM
09-01 konstruktor - z parametrami i bez przeciążanie konstruktora,
      gettery i settery dla pół prywatnych, finalize do niszczenia obiektów
09-02 dziedziczenie, nadpisywanie, override
      kod wspólny wyrzucamy do klas bazowych
09-03 metoda super wywołuje metody z klasy nadrzędnej, super mozna dopisac do metody overrajdowanej
09-04 blokowanie dziedziczenia i final
      w javie klasy sa domyślnie otwarte na dziedizczenie blokowanie dziedizczenia poprzez final
      tak samo mozemy blokowac metody przed override poprzez final
09-05 enkapsulacja i widoczność pół zmiennych
      public widoczny z zewnątrz
      paketowy dostpene w package
      private dostępne tylko w danej klasie, dostęp do pół przez gettery i settery
      protected dostęp z danego package i klas dziedziczący po dane klasie
09-06 rzutowanie obiektów
      sprawdzanie czy da sie rzutować
10-01 klasa abstrakcyjna tylko do dzoedziczenia
      metody abstrakcyjne nie mają implementacji w klasie (mają tylko nazwę i sa w klasie nadrzędnej
      sa przeznaczone do dziedziczenia. wszytskie metody zaimplementowane w klasie abstrakcyjnej muszą być
      napisane w klasach dziedziczących po abstrakcyjnej
      getClass().getSimpleName()
      klasy abstrakcyjne zbierają części wspólne klas dziedziczących
      łączą obiekty pod względem dziedziczenia łączą punkty wspólne klas
10-02 interfejsy
      klasa moze dziedziczyć po jednej klasie a interefejsów można implementować kilka
      metody w interefejscie musz ą byc publiczne i powinny być wykorzystywane w aplikacji na zewnątrz
      w metodach interefejsu można dopisac do metod podstwowe implementacje
      trzeba tylko przed metodami dodac słówo default
10-03 filozofia oop
10-04 dobre zasady programowania oop solid dry kiss
      SOLID:
            * Single responsibility - klasa powinna odpowiadac za jedną rzecz -
                                      jeśli mamy klase która pobiera dane z json i przenosi dane do innego formatu to
                                      jest ptoblem jesli zmieni nam sie format danych wejsciowych i wyjściowych. klasa nie
                                      powinna definiowac np. kota i psa. jedna klasa robi jedną rzecz
            * Open - Closed - kod otwarty na roszerzenie zamknięty na modyfikacje, w klasie można łatwo dodac nowe funkcjonalności
                              bez wpływania na istniejący kod
            * podstawienie Liskov -
            * interface segregation - interfejs powinin robic konkretną rzecz np. wydruk, szczekanie psa,
                                      jedna specyficzna funkcjonalność, interfejs powinine być wyspecjalizowany
                                      ponieważ klasa może implementować wiele interfejsów
            * dependency inversion -  odwrócenie zalezności, wysokopoziomowe moduły nie powinny zależeć od nisko
                                      poziomowych modułów
       DRY: do not repeat yourself - refactoring
       KISS Keep it short and Simple
10-05  kolekcje arrayList, linkeList





























